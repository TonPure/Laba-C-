using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Drawing.Printing;
using System.IO;

namespace SimpleNotepad
{
    public partial class SimpleNotepadForm : Form
    {
        public SimpleNotepadForm()
        {
            InitializeComponent();
        }

        private const string V = "";
        string mi = V;
        private StringReader m_myReader;
        private uint m_PrintPageNumber;
        private bool m_DocumentChanged = false;
        private void MenuSelect()
        {
            string ms;
            string mi1 = mi;
            switch (mi1)
            {
                case "Создать": ms = "Новый документ"; break;
                case "Открыть...": ms = "Открыть документ"; break;
                case "Сохранить": ms = "Сохранить документ"; break;
                case "Сохранить как...": ms = "Сохранить документ"; break;
                case "Page Set&up...": ms = "Параметры страницы"; break;
                case "Print Pre&view...":
                    ms = "Предварительный просмотр";
                    break;
                case "&Print...": ms = "Печатать документ"; break;
                case "Exit": ms = "Завершение работы"; break;
                case "&Undo": ms = "Отменить ввод"; break;
                case "&Redo": ms = "Повторить ввод"; break;
                case "Cu&t": ms = "Вырезать"; break;
                case "&Copy": ms = "Скопировать"; break;
                case "&Paste": ms = "Вставить"; break;
                case "&Delete": ms = "Удалить"; break;
                case "&Select All": ms = "Выделить все"; break;
                case "&Font...": ms = "Выбрать шрифт"; break;
                case "C&olor...": ms = "Выбрать цвет"; break;
                case "&Bold": ms = "Жирный шрифт"; break;
                case "&Italic": ms = "Наклонный шрифт"; break;
                case "&Underline": ms = "Подчеркивание"; break;
                case "&Strikeout": ms = "Перечеркивание"; break;
                case "&Left": ms = "Выравнивание по левой границе"; break;
                case "&Right": ms = "Выравнивание по правой границе"; break;
                case "&Center": ms = "Центровка"; break;
                case "&About...": ms = "О программе"; break;
                default: ms = "cucu"; break;
            }
            toolStripStatusLabel1.Text = ms;
        }
        private void SetBold()
        {
            if (richTextBox1.SelectionFont != null)
            {
                System.Drawing.Font currentFont = richTextBox1.SelectionFont;
                System.Drawing.FontStyle newFontStyle;
                CheckMenuFontCharacterStyle();

                if (richTextBox1.SelectionFont.Bold == true)
                {
                    newFontStyle = FontStyle.Regular;
                }
                else
                {
                    newFontStyle = FontStyle.Bold;
                }

                richTextBox1.SelectionFont = new Font(
                  currentFont.FontFamily, currentFont.Size, newFontStyle);
            }
        }

        private void SetItalic()
        {
            if (richTextBox1.SelectionFont != null)
            {
                System.Drawing.Font currentFont = richTextBox1.SelectionFont;
                System.Drawing.FontStyle newFontStyle;
                CheckMenuFontCharacterStyle();

                if (richTextBox1.SelectionFont.Italic == true)
                {
                    newFontStyle = FontStyle.Regular;
                }
                else
                {
                    newFontStyle = FontStyle.Italic;
                }

                richTextBox1.SelectionFont = new Font(
                  currentFont.FontFamily, currentFont.Size, newFontStyle);
            }
        }

        private void SetUnderline()
        {
            if (richTextBox1.SelectionFont != null)
            {
                System.Drawing.Font currentFont = richTextBox1.SelectionFont;
                System.Drawing.FontStyle newFontStyle;
                CheckMenuFontCharacterStyle();

                if (richTextBox1.SelectionFont.Underline == true)
                {
                    newFontStyle = FontStyle.Regular;
                }
                else
                {
                    newFontStyle = FontStyle.Underline;
                }

                richTextBox1.SelectionFont = new Font(
                  currentFont.FontFamily, currentFont.Size, newFontStyle);
            }
        }

        private void SetStrikeout()
        {
            if (richTextBox1.SelectionFont != null)
            {
                System.Drawing.Font currentFont = richTextBox1.SelectionFont;
                System.Drawing.FontStyle newFontStyle;
                CheckMenuFontCharacterStyle();

                if (richTextBox1.SelectionFont.Strikeout == true)
                {
                    newFontStyle = FontStyle.Regular;
                }
                else
                {
                    newFontStyle = FontStyle.Strikeout;
                }

                richTextBox1.SelectionFont = new Font(
                  currentFont.FontFamily, currentFont.Size, newFontStyle);
            }
        }

        private void CheckMenuFontCharacterStyle()
        {
            if (richTextBox1.SelectionFont.Bold == true)
            {
                menuФшрифтЖирный.Checked = true;
            }
            else
            {
                menuФшрифтЖирный.Checked = false;
            }

            if (richTextBox1.SelectionFont.Italic == true)
            {
                menuФшрифтНаклонный.Checked = true;
            }
            else
            {
                menuФшрифтНаклонный.Checked = false;
            }

            if (richTextBox1.SelectionFont.Underline == true)
            {
                menuФшрифтПодчеркнутый.Checked = true;
            }
            else
            {
                menuФшрифтПодчеркнутый.Checked = true;
            }

            if (richTextBox1.SelectionFont.Strikeout == true)
            {
                menuФшрифтПеречеркнутый.Checked = true;
            }
            else
            {
                menuФшрифтПеречеркнутый.Checked = true;
            }
        }

        private void MenuFilePrint()
        {
            mi = "Печать...";
            MenuSelect();
            m_PrintPageNumber = 1;

            string strText = this.richTextBox1.Text;
            m_myReader = new StringReader(strText);

            Margins margins = new Margins(100, 50, 50, 50);
            printDocument1.DefaultPageSettings.Margins = margins;

            if (printDialog1.ShowDialog() == DialogResult.OK)
            {
                this.printDocument1.Print();
            }
            m_myReader.Close();
        }

        private void MenuFilePrintPreview()
        {
            mi = "PeintPreview";
            MenuSelect();
            m_PrintPageNumber = 1;
            string strText = this.richTextBox1.Text;
            m_myReader = new StringReader(strText);
            Margins margins = new Margins(100, 50, 50, 50);

            printDocument1.DefaultPageSettings.Margins = margins;
            printPreviewDialog1.ShowDialog();

            m_myReader.Close();

        }
        private void MenuFilePageSetup()
        {
            mi = "Параметры страницы...";
            MenuSelect();
            pageSetupDialog1.ShowDialog();
        }

        private void MenuFileOpen()
        {
            if (openFileDialog1.ShowDialog() ==
               System.Windows.Forms.DialogResult.OK &&
               openFileDialog1.FileName.Length > 0)
                mi = "Открыть...";
                MenuSelect();
            {
                try
                {
                    richTextBox1.LoadFile(openFileDialog1.FileName,
                       RichTextBoxStreamType.RichText);
                }
                catch (System.ArgumentException)
                {
                    richTextBox1.LoadFile(openFileDialog1.FileName,
                       RichTextBoxStreamType.PlainText);
                }
                this.Text = "Файл [" + openFileDialog1.FileName + "]";
                toolStripStatusLabel2.Text = V;
                m_DocumentChanged = false;
            }
        }

        private void MenuFileSaveAs()
        {
            mi = "Сохранить как...";
            MenuSelect();
            if (saveFileDialog1.ShowDialog() ==
               System.Windows.Forms.DialogResult.OK &&
            saveFileDialog1.FileName.Length > 0)
            {
                richTextBox1.SaveFile(saveFileDialog1.FileName);
                this.Text = "Файл [" + saveFileDialog1.FileName + "]";
                m_DocumentChanged = false;
                toolStripStatusLabel2.Text = V;
            }
        }



        private void menuFileСоздать_Click(object sender, EventArgs e)
        {
            mi = "Создать";
            MenuSelect();
            if (m_DocumentChanged)
                MenuFileSaveAs();
            richTextBox1.Clear();
            toolStripStatusLabel2.Text = V;
            m_DocumentChanged = false;
        }

        private void menuFileОткрыть_Click(object sender, EventArgs e)
        {
            MenuFileOpen();
        }

        private void menuFileСохранить_Click(object sender, EventArgs e)
        {
            MenuFileSaveAs();
        }

        private void menuFileСохранитьКак_Click(object sender, EventArgs e)
        {
            MenuFileSaveAs();
        }

        private void menuFileПараметрыСтраницы_Click(object sender, EventArgs e)
        {
            MenuFilePageSetup();
        }

        private void menuFileПечать_Click(object sender, EventArgs e)
        {
            MenuFilePrint();
        }

        private void menuFileВыход_Click(object sender, EventArgs e)
        {
            if (m_DocumentChanged)
                MenuFileSaveAs();
            Close(); //изменения в документе будут потеряны!
        }

        private void menuПравкаОтменить_Click(object sender, EventArgs e)
        {
            richTextBox1.Undo();
        }

        private void menuПравкаВырезать_Click(object sender, EventArgs e)
        {
            richTextBox1.Cut();
        }

        private void menuПравкаВставить_Click(object sender, EventArgs e)
        {
            richTextBox1.Paste();
        }

        private void menuПравкаКопировать_Click(object sender, EventArgs e)
        {
            richTextBox1.Copy();
        }

        private void menuПравкаУдалить_Click(object sender, EventArgs e)
        {
            richTextBox1.Cut();
        }

        private void menuПравкаВыделитьВсе_Click(object sender, EventArgs e)
        {
            richTextBox1.SelectAll();
        }

        private void menuФорматПереносПоСловам_Click(object sender, EventArgs e)
        {

        }

        private void menuФорматШрифт_Click(object sender, EventArgs e)
        {
            if (fontDialog1.ShowDialog() == DialogResult.OK)
            {
                richTextBox1.SelectionFont = fontDialog1.Font;
            }
        }

        private void menuВидМастштаб_Click(object sender, EventArgs e)
        {

        }

        private void menuВидСтрокаСостояния_Click(object sender, EventArgs e)
        {

        }

        private void menuСправкаПросмотретьСправку_Click(object sender, EventArgs e)
        {

        }

        private void menuСправкаОтправитьОтзыв_Click(object sender, EventArgs e)
        {

        }

        private void menuСправкаОпрограмме_Click(object sender, EventArgs e)
        {
            Form dlgAbout = new HelpAboutForm();
            dlgAbout.ShowDialog();
        }

        private void printDocument1_PrintPage(object sender, PrintPageEventArgs e)
        {
            int lineCount = 0;       // счетчик строк
                                     // вертикальной оси
            string currentLine = null;  // текст текущей строки

            // Шрифт для печати текста
            Font printFont = this.richTextBox1.Font;

            // Кисть для печати текста
            SolidBrush printBrush = new SolidBrush(Color.Black);

            // Размер отступа слева
            float leftMargin = e.MarginBounds.Left;

            // Размер отступа сверху
            float topMargin = e.MarginBounds.Top +
               3 * printFont.GetHeight(e.Graphics);

            // Вычисляем количество строк на одной странице с учетом отступа
            float linesPerPage = (e.MarginBounds.Height -
               6 * printFont.GetHeight(e.Graphics)) /
               printFont.GetHeight(e.Graphics);

            // Цикл печати всех строк страницы
            while (lineCount < linesPerPage &&
               ((currentLine = m_myReader.ReadLine()) != null))
            {
                // Вычисляем позицию очередной распечатываемой строки
                float yLinePosition = topMargin + (lineCount *
                  printFont.GetHeight(e.Graphics));

                // Печатаем очередную строку
                e.Graphics.DrawString(currentLine, printFont, printBrush,
                  leftMargin, yLinePosition, new StringFormat());

                // Переходим к следующей строке
                lineCount++;
            }

            // Печать колонтитулов страницы

            // Номер текущей страницы
            string sPageNumber = "Page " + m_PrintPageNumber.ToString();

            // Вычисляем размеры прямоугольной области, занимаемой верхним 
            // колонтитулом страницы
            _ = new SizeF();
            SizeF stringSize = e.Graphics.MeasureString(sPageNumber, printFont,
               e.MarginBounds.Right - e.MarginBounds.Left);

            // Печатаем номер страницы
            e.Graphics.DrawString(sPageNumber, printFont, printBrush,
               e.MarginBounds.Right - stringSize.Width, e.MarginBounds.Top,
               new StringFormat());

            // Печатаем имя файла документа
            e.Graphics.DrawString(this.Text, printFont, printBrush,
               e.MarginBounds.Left, e.MarginBounds.Top, new StringFormat());

            // Кисть для рисования горизонтальной линии, 
            // отделяющей верхний колонтитул
            Pen colontitulPen = new Pen(Color.Black)
            {
                Width = 2
            };

            // Рисуем верхнюю линию
            e.Graphics.DrawLine(colontitulPen,
               leftMargin,
               e.MarginBounds.Top + printFont.GetHeight(e.Graphics) + 3,
               e.MarginBounds.Right, e.MarginBounds.Top +
               printFont.GetHeight(e.Graphics) + 3);

            // Рисуем линию, отделяющую нижний колонтитул документа
            e.Graphics.DrawLine(colontitulPen,
               leftMargin, e.MarginBounds.Bottom - 3,
               e.MarginBounds.Right, e.MarginBounds.Bottom - 3);

            // Печатаем текст нижнего колонтитула
            e.Graphics.DrawString(
            "SimpleNotepad, (c) Александр Фролов, http://www.frolov.pp.ru",
               printFont, printBrush,
               e.MarginBounds.Left, e.MarginBounds.Bottom, new StringFormat());

            // Если напечатаны не все строки документа, 
            // переходим к следующей странице
            if (currentLine != null)
            {
                e.HasMorePages = true;
                m_PrintPageNumber++;
            }

            // Иначе завершаем печать страницы
            else
                e.HasMorePages = false;

            // Освобождаем ненужные более ресурсы
            printBrush.Dispose();
            colontitulPen.Dispose();
        }

        private void richTextBox1_TextChanged(object sender, EventArgs e)
        {
            m_DocumentChanged = true;
            toolStripStatusLabel2.Text = "Изменено";
        }

        private void menuПравкаRedo_Click(object sender, EventArgs e)
        {
            richTextBox1.Redo();
        }

        private void menuФЦветВыравниваниеПараграфа_Click(object sender, EventArgs e)
        {

        }

        private void menuФЦветСтиль_Click(object sender, EventArgs e)
        {

        }

        private void menuФорматЦвет_Click(object sender, EventArgs e)
        {
            if (colorDialog1.ShowDialog() == DialogResult.OK)
            {
                richTextBox1.SelectionColor = colorDialog1.Color;
            }
        }

        private void menuФвыравниваниеПараграфаЛево_Click(object sender, EventArgs e)
        {
            richTextBox1.SelectionAlignment = HorizontalAlignment.Left;
        }

        private void menuФвыравниваниеПараграфаПраво_Click(object sender, EventArgs e)
        {
            richTextBox1.SelectionAlignment = HorizontalAlignment.Right;
        }

        private void menuФвыравниваниеПараграфаЦентр_Click(object sender, EventArgs e)
        {
            richTextBox1.SelectionAlignment = HorizontalAlignment.Center;
        }

        private void menuФшрифтЖирный_Click(object sender, EventArgs e)
        {
            SetBold();
        }

        private void menuФшрифтНаклонный_Click(object sender, EventArgs e)
        {
            SetItalic();
        }

        private void menuФшрифтПодчеркнутый_Click(object sender, EventArgs e)
        {
            SetUnderline();
        }

        private void menuФшрифтПеречеркнутый_Click(object sender, EventArgs e)
        {
            SetStrikeout();
        }

        private void menuFprintPreview_Click(object sender, EventArgs e)
        {
            MenuFilePrintPreview();
        }
    }
}
